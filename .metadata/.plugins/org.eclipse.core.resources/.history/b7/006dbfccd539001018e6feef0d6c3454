package handler;

import domain.PagingVO;

public class PagingHandler {
	// DB에서는 필요하지 않지만 화면에서 처리가 필요한 경우
	// DB에서 필요한 객체는 domain => VO

	// paging 처리는 화면에서 필요한 내용(페이지네이션 값) => PagingHandler.class
	// DB 처리에 필요한 내용(limit, 번지, 갯수) => PagingVO.class

	// list 하단에 적은 페이지네이션의 핸들링을 위한 클래스
	private int startPage; // 현재 화면의 페이지네이션의 시작 번호. 1, 11, 21, 31, ...
	private int endPage; // 현재 화면의 페이지네이션의 끝 번호. 10, 20, 30, ...
	private int realEndPage; // 전체 페이지네이션의 마지막 번호
	private boolean prev; // 이전 페이지의 존재여부
	private boolean next; // 다음 페이지의 존재여부

	// 컨트롤러에서 받아올 값
	private PagingVO pgvo; // 현재 사용자가 클릭한 페이지 번호 / QTY 값을 저장
	private int totalCount; // DB에서 검색해오기

	public PagingHandler(PagingVO pgvo, int totalCount) {
		this.pgvo = pgvo;
		this.totalCount = totalCount;

		// 1 2 3 4 5 6 7 8 9 10
		// 1 ~ 10 / 11 ~ 20 / 21 ~ 30
		this.endPage = ((this.pgvo.getPageNo() - 1) / this.pgvo.getQty() + 1) * this.pgvo.getQty();
		this.startPage = this.endPage - 9;
		
		// realEndPage => 전체 게시글 수 / 한 페이지에 표시되는 게시글 수
		// 103 => 10.3 => 11
		this.realEndPage = (int)Math.ceil(totalCount/this.pgvo.getQty());
	}

}
